// Tessellation Control Shader

#version 400

layout(quads, equal_spacing, cw) in;

uniform mat4 MVP;
uniform mat3 NM;

uniform int totalWaves;
uniform float waveAmplitudeDecay;
uniform float waveFrequencyIncrease;
uniform float waveSpeed;

uniform vec3 camPos;
uniform vec3 lightPos0;
uniform vec3 lightPos1;

// Highlight para esse uniform:
// Quando os uniforms sao setados um a um, eles tem uma limitacao de tamanho.
// Para esse caso com vec2, eu consegui passar um vetor maximo de 16 posicoes.
// Para que possa ser possivel passar uniforms maiores, deve ser utilizado
// um uniform buffer.
uniform vec2 wavesDirections[16];

uniform float elapsedTime;

out vec3 normalVectorTes;
out vec3 viewDirectionTes;
out vec3 lightDirectionTes0;
out vec3 lightDirectionTes1;

// Calcula a normal com base nas derivadas parciais das onda gerada
void CalculateNormalVector(float xDerivative, float zDerivative)
{
	vec3 tangent = vec3(1.0, 0.0, xDerivative);
	vec3 biNormal = vec3(0.0, 1.0, zDerivative);

	normalVectorTes = normalize(NM * cross(tangent, biNormal));
}

// Calcula a soma das ondas para gerar o efeito de ondas do mar
float CalculateSumOfWaves()
{
	float totalSum = 0.0;

	float xDerivativeSum = 0.0;
	float zDerivativeSum = 0.0;

	float xDerivative = 0.0;
	float zDerivative = 0.0;

	float currentFrequency = 1.0;
	float currentAmplitude = 0.7;

	for (int i = 0; i < totalWaves; i++)
	{
		vec2 waveDirection = wavesDirections[i];
		float displacement = (xDerivative + gl_Position.x) * waveDirection.x + (zDerivative + gl_Position.z) * waveDirection.y;
		float angleValue = displacement * currentFrequency + elapsedTime * waveSpeed * currentFrequency;

		totalSum += currentAmplitude * exp(sin(angleValue) - 1);

		xDerivative = waveDirection.x * currentAmplitude * exp(sin(angleValue) - 1) * cos(angleValue);
		xDerivativeSum += xDerivative;

		zDerivative = waveDirection.y * currentAmplitude * exp(sin(angleValue) - 1) * cos(angleValue);
		zDerivativeSum += zDerivative;

		currentFrequency *= waveFrequencyIncrease;
		currentAmplitude *= waveAmplitudeDecay;
	}

	CalculateNormalVector(xDerivativeSum, zDerivativeSum);
	return totalSum;
}

void main()
{
	// Coordenadas geradas pela GPU
	float u = gl_TessCoord.x;
	float v = gl_TessCoord.y;

	// Vértices do nosso Patch
	vec4 p0 = gl_in[0].gl_Position;
	vec4 p1 = gl_in[1].gl_Position;
	vec4 p2 = gl_in[2].gl_Position;
	vec4 p3 = gl_in[3].gl_Position;

	// Linear interpolation
	gl_Position =
	    p0 * (1-u) * (1-v) +
	    p1 * u * (1-v) +
	    p3 * v * (1-u) +
	    p2 * u * v;

	gl_Position.y += CalculateSumOfWaves();

	// Nesse momento sao calculados os vetores direcao da camera
	// e das luzes. Eles devem ser calculados antes de passarem pela MVP
	viewDirectionTes = normalize(camPos - gl_Position.xyz);
	lightDirectionTes0 = normalize(lightPos0 - gl_Position.xyz);
	lightDirectionTes1 = normalize(lightPos1 - gl_Position.xyz);
	gl_Position = MVP * gl_Position;
}