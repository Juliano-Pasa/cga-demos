// TES Shader //

#version 400

layout(quads, equal_spacing, cw) in;

uniform vec3 lightPos;

out vec3 tesLightDirection;

vec4 CalculateInterpolatedPosition(float u, float v);

void main()
{
	float u = gl_TessCoord.x;
	float v = gl_TessCoord.y;

	vec4 interpolatedPosition = CalculateInterpolatedPosition(u, v);
	tesLightDirection = normalize(lightPos - interpolatedPosition.xyz);

	gl_Position = interpolatedPosition;
}

vec4 CalculateInterpolatedPosition(float u, float v)
{
	vec4 p0 = gl_in[0].gl_Position;
	vec4 p1 = gl_in[1].gl_Position;
	vec4 p2 = gl_in[2].gl_Position;
	vec4 p3 = gl_in[3].gl_Position;

	return  p0 * (1 - u) * (1 - v) +
			p1 * u * (1 - v) +
			p3 * v * (1 - u) +
			p2 * u * v;
}